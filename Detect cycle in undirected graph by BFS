class Solution {
    
    bool bfs(int start, vector<int> adj[], vector<int>& vis) {
        queue<pair<int,int>> q; 
        vis[start] = 1;
        q.push({start, -1}); // push node with its parent {node, parent}
        
        while (!q.empty()) {
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for (auto it : adj[node]) {
                if (!vis[it]) {
                    vis[it] = 1;
                    q.push({it, node});
                }
                else if (it != parent) {
                    // Visited neighbor that's not the parent => cycle
                    return true;
                }
            }
        }
        return false;
    }
    
  public:
    bool isCycle(int V, vector<vector<int>>& edges) {
        // Build adjacency list
        vector<int> adj[V];
        for (auto it : edges) {
            int u = it[0];
            int v = it[1];
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        
        vector<int> vis(V, 0);
        
        // Run BFS for all components
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (bfs(i, adj, vis)) return true;
            }
        }
        return false;
    }
};
