class Solution {
private:
    bool check(int start, vector<vector<int>>& graph, vector<int>& color) {
        queue<int> q;
        q.push(start);
        color[start] = 0;  // Start coloring with 0

        while (!q.empty()) {
            int node = q.front();
            q.pop();

            for (auto it : graph[node]) {

                // not coloured
                if (color[it] == -1) {
                    // Assign opposite color
                    color[it] = !color[node];
                    q.push(it);
                }
                else if (color[it] == color[node]) {
                    // Same color as itbor => not bipartite
                    return false;
                }
            }
        }
        return true;
    }

public:
    bool isBipartite(vector<vector<int>>& graph) {
        int V = graph.size();
        vector<int> color(V, -1);

        // Check each component
        for (int i = 0; i < V; i++) {
            if (color[i] == -1) {
                if (check(i, graph, color) == false) {
                    return false;
                }
            }
        }
        return true;
    }
};
