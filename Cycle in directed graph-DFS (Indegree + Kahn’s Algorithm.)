class Solution {
public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        // build adjacency list
        vector<vector<int>> adj(V);
        vector<int> indegree(V, 0);

        for (auto &it : edges) {
            int u = it[0];
            int v = it[1];
            adj[u].push_back(v);
            indegree[v]++;
        }

        queue<int> q;
        // push all nodes with indegree 0
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) q.push(i);
        }

        int count = 0; // number of nodes processed

        while (!q.empty()) {
            int node = q.front();
            q.pop();
            count++;

            for (auto it : adj[node]) {
                indegree[it]--;
                if (indegree[it] == 0) {
                    q.push(it);
                }
            }
        }

        // if all nodes not processed => cycle exists
        return count != V;
    }
};
