
class Solution {
    
  private:
  
  bool dfs(int node, vector<vector<int>>&adj, 
  vector<int>&vis, vector<int>&pathVis){
      vis[node]=1;
      pathVis[node]=1;
     
          
          for(auto it: adj[node]){
              //when the node is not visited 
              if(!vis[it]){
                  if (dfs(it, adj, vis, pathVis)==true) return true;   
              }
              // it the node has been previously visited but
              //it has to be at the same path
              else if (pathVis[it]){
                  return true;
                  
              }
          }
          
      
      pathVis[node]=0;
      return false;
  }
    
  public:
    bool isCyclic(int V, vector<vector<int>> &edges) {
        
         vector<vector<int>> adj(V);
        // create a adjacecny list
        for(auto &it : edges){
            int u=it[0];
            int v=it[1];
            
            adj[u].push_back(v);
            //adj[v].push_back(u);
            
        }
    vector<int>vis(V,0);
    vector<int>pathVis(V,0);
    
    for(int i=0; i<V; i++){
        if(!vis[i]){
           if(dfs(i,adj,vis,pathVis)==true)return true; 
        }
    }
    return false;
      
        
    }
};
